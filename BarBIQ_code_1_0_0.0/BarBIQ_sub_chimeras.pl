#! /usr/bin/env perl
##########################################################################################################################################
######Description of this code#####
## This code is used remove chimaeras, which were mainly generated during the amplification. Chimaeras often occur during PCR amplification and are a common problem in 16S rRNA amplicon measurements. 
## The input file is the output file from BarBIQ_sub_indels.pl
##########################################################################################################################################
######how to run this code #####
###command##
## BarBIQ_sub_chimeras.pl --in inputfile --out outputfile
###explaination##
## --in: the inputfile which is generated by BarBIQ_sub_indels.pl.
## --out: outputfile, please set a name for your outputfile.
##########################################################################################################################################
#####Install#####
## None
##########################################################################################################################################

#####code#####
use strict;
use warnings;

print "Now you are runing $0\n";
print "The parameters are: @ARGV\n";

##read command##
my ($i,$inputfile,$outputfile);
my $threshold_d=0.1; ## this is a threshold to delete the chimeras which the portion of chimeras only is lower than 15%
# my $threshold_p=0.6; ## this is a threshold to delete the chimeras which the portion of chimeras with parents is higherthan 60%
for($i=0; $i<=$#ARGV; $i=$i+2)
    {
        if ($ARGV[$i] eq "--in")  {$inputfile = $ARGV[$i+1];}
     elsif ($ARGV[$i] eq "--out") {$outputfile = $ARGV[$i+1];}
     else                         {die "Your input is wrong!!!\n Please input \"--in inputfile --out outputfile\"\n $!";}
    }
if(!$inputfile)   {die "Your input is wrong!!!\n Please input \"--in: inputfile\"\n $!";}
if(!$outputfile)  {die "Your input is wrong!!!\n Please input \"--out: outputfile\"\n $!";}
if(-e $outputfile){die "Your output file $outputfile is already existed!!! please check!!!\n $!";}
my $outputfile_middle="$outputfile"."_cases_no";
unlink $outputfile_middle;
##read command##

##check the inputfile##
if(!(-e $inputfile)) {die "Your input file $inputfile is not existed!!! please check!!!\n $!";}
open (FILE,$inputfile) or die "Could not open file '$inputfile' $!"; # open inputfile
print "Your inputfiles is:\n$inputfile\n";
my $gi=<FILE>;
chomp $gi;
my @info=split(/\s+/,$gi);
if(!(($#info == 5) && ($info[0] =~ /\Acluster_/)))
   {
    die "Your input file $inputfile is wrong!!! please check!!!\n $!";
   }
close FILE;
print "Inputfile is OK!\nStart to calculating:\n";
##check the inputfile##

##Get one cluster's data and find the chimeras##
my (@chim_cases, %chim_cases, %chimchim);
open (FILE,$inputfile) or die "Could not open file '$inputfile' $!";
chomp($gi=<FILE>);
@info=split(/\s+/,$gi);
my ($cluster_name, $cluster_name_next);
if($info[0] =~ m{\Acluster_([0-9]*)})
  {
   $cluster_name = "cluster_"."$1";
  }
my @sequence;
push @sequence, [@info];
while($gi=<FILE>)
   {
    chomp $gi;
    @info=split(/\s+/,$gi);
    if($info[0] =~ m{\Acluster_([0-9]*)})
        {
          $cluster_name_next = "cluster_"."$1";
        }
    if ($cluster_name_next eq $cluster_name) {
       push @sequence, [@info];
      } else {
       &Find_chimeras($cluster_name, \@sequence); 
       undef @sequence;
       $cluster_name = $cluster_name_next;
       push @sequence, [@info];
      }
    }
       &Find_chimeras($cluster_name, \@sequence);
       undef @sequence;
close FILE;
foreach my $key (keys %chim_cases)
  {
    my @chim_case1=split(":",$key);
    push @chim_cases, [@chim_case1];
    if(exists $chimchim{$chim_case1[0]}) { $chimchim{$chim_case1[0]}++;}
    else { $chimchim{$chim_case1[0]} = 1;}
  }
foreach my $key (keys %chimchim)
  {
    if($chimchim{$key}>1) { print "$key has $chimchim{$key} parents\n";}
  }

my (%chim_parent_no, %chim_mother_no, %chim_father_no, %chim_no);
my %seqs;
open (FILE,$inputfile) or die "Could not open file '$inputfile' $!";
chomp($gi=<FILE>);
@info=split(/\s+/,$gi);
if($info[0] =~ m{\Acluster_([0-9]*)})
  {
   $cluster_name = "cluster_"."$1";
  }
push @sequence, [@info];
$seqs{$info[5]}=$cluster_name;
while($gi=<FILE>)
   {
    chomp $gi;
    @info=split(/\s+/,$gi);
    if($info[0] =~ m{\Acluster_([0-9]*)})
        {
          $cluster_name_next = "cluster_"."$1";
        }
    if ($cluster_name_next eq $cluster_name) {
       push @sequence, [@info]; $seqs{$info[5]}=$cluster_name;
      } else {
       &Check_chimeras(\%seqs, \@sequence);
       undef @sequence;
       undef %seqs;
       $cluster_name = $cluster_name_next;
       push @sequence, [@info];
       $seqs{$info[5]}=$cluster_name;
      }
    }
       &Check_chimeras(\%seqs, \@sequence);
       undef @sequence;
       undef %seqs;
close FILE;

my %delete;
open (MID,'>>', $outputfile_middle) or die "Could not open file '$outputfile_middle' $!";
foreach my $key (keys %chim_no)
   {
      my $total=($chim_parent_no{$key}+$chim_mother_no{$key}+$chim_father_no{$key}+$chim_no{$key});
      my $ratio_d=$chim_no{$key}/$total;
      my $ratio_p=$chim_parent_no{$key}/$total;
      print MID ("$chim_parent_no{$key}\t$chim_mother_no{$key}\t$chim_father_no{$key}\t$chim_no{$key}\t$ratio_p\t$ratio_d\t$key\n");
      my $threshold_d_v=1/$total; # my $threshold_p_v=($total-3)/$total;  ### threshold for delete the chimeras
      if (($ratio_d<=$threshold_d) || ($ratio_d<=$threshold_d_v))
         {
           $delete{$key}="$ratio_p\t$ratio_d";
         }
   }
close MID;

my $deleted=0;##The number of deleted seqs
my $undeleted=0;##The number of kept seqs
open (OUTF,'>>', $outputfile) or die "Could not open file '$outputfile' $!";
open (FILE,$inputfile) or die "Could not open file '$inputfile' $!";
while($gi=<FILE>)
    {
      chomp $gi;
      @info=split(/\s+/,$gi);
      if(exists $delete{$info[5]})
         {$deleted++;}
     else{
         print OUTF ("$gi\n"); $undeleted++;
         }
    }
close OUTF;
close FILE;

print "The number of kept seqs:$undeleted\nThe number of deleted seqs:$deleted\n";
      

#Check the chimeras#
sub Check_chimeras
     {
      my ($seqs_c, $seq_c)=@_;
      my  %chim_case_seq;
      for(my $i=0; $i<=$#$seq_c; $i++)
         {
          if(exists $chimchim{$$seq_c[$i][5]})
              {
                my %seqs_a=%$seqs_c;
                delete $seqs_a{$$seq_c[$i][5]};
                $chim_case_seq{$$seq_c[$i][5]}="d";
                if(!(exists $chim_no{$$seq_c[$i][5]}))
                   {
                    $chim_parent_no{$$seq_c[$i][5]}=0;
                    $chim_mother_no{$$seq_c[$i][5]}=0;
                    $chim_father_no{$$seq_c[$i][5]}=0;
                    $chim_no{$$seq_c[$i][5]}=0;
                   }
                for(my $j=0; $j<=$#chim_cases; $j++)
                   {
                     if((exists $seqs_a{$chim_cases[$j][1]}) && ($seqs_a{$chim_cases[$j][2]}))
                        {
                         $chim_case_seq{$$seq_c[$i][5]}="p";
                         last;
                        }
                   }
                if($chim_case_seq{$$seq_c[$i][5]} eq "p")
                  {
                   $chim_parent_no{$$seq_c[$i][5]}++;
                  }
              else{
                     for(my $j=0; $j<=$#chim_cases; $j++)
                         {
                           if(exists $seqs_a{$chim_cases[$j][1]})
                              {
                                $chim_case_seq{$$seq_c[$i][5]}="m";
                                last;
                              }
                         }
                    if($chim_case_seq{$$seq_c[$i][5]} eq "m")
                       {
                        $chim_mother_no{$$seq_c[$i][5]}++;
                       }
                   else{
                        for(my $j=0; $j<=$#chim_cases; $j++)
                            {
                              if(exists $seqs_a{$chim_cases[$j][2]})
                                  {
                                   $chim_case_seq{$$seq_c[$i][5]}="f";
                                   last;
                                  }
                            }
                        if($chim_case_seq{$$seq_c[$i][5]} eq "f")
                           {
                            $chim_father_no{$$seq_c[$i][5]}++;
                           }
                       else{
                            $chim_no{$$seq_c[$i][5]}++;
                           }
                      }
                 }
              }
         }
       undef %chim_case_seq;
     }
#Check the chimeras#

#Find the chimeras#
sub Find_chimeras
     {
      my ($cluster, $seq)=@_;
      my ($i,$j,$m, $chimeras, $mother, $father);
      if ($#{$seq}>=2)
         {
          for($i=0; $i<=($#$seq-2); $i++)
             {
              for($j=$i+1; $j<$#$seq; $j++)
                 {
                  for($m=$j+1; $m<=$#$seq; $m++)
                      {
                        ($chimeras,$mother,$father)=&chimeras($$seq[$i][5], $$seq[$j][5], $$seq[$m][5],$$seq[$i][1], $$seq[$j][1], $$seq[$m][1]);
                        if($chimeras ne "non")
                            {
                             my $chim_case1="$chimeras:$mother:$father";
                             if(exists $chim_cases{$chim_case1}) { $chim_cases{$chim_case1}++;}else{$chim_cases{$chim_case1}=1;}
                            }
                        ($chimeras,$mother,$father)=&chimeras($$seq[$i][5], $$seq[$m][5], $$seq[$j][5],$$seq[$i][1], $$seq[$m][1], $$seq[$j][1]);
                        if($chimeras ne "non")
                            {
                             my $chim_case1="$chimeras:$mother:$father";
                             if(exists $chim_cases{$chim_case1}) { $chim_cases{$chim_case1}++;}else{$chim_cases{$chim_case1}=1;} 
                            }
                        ($chimeras,$mother,$father)=&chimeras($$seq[$j][5], $$seq[$m][5], $$seq[$i][5],$$seq[$j][1], $$seq[$m][1], $$seq[$i][1]);
                        if($chimeras ne "non")
                            {
                             my $chim_case1="$chimeras:$mother:$father";
                             if(exists $chim_cases{$chim_case1}) { $chim_cases{$chim_case1}++;}else{$chim_cases{$chim_case1}=1;}
                            }
                      }
                  }
              }
         }
      sub chimeras ## for searching chimeras
         {
           # print "Hello001\n";
           my (@seq1, @seq2, @seq3, @x1, @x2, $xf, $xm);   
           if(($_[5] < $_[4]) || ($_[5] < $_[3]))
               {
                @seq1=split(//,$_[0]);
                @seq2=split(//,$_[1]);
                @seq3=split(//,$_[2]);
           ## 1 is father, 2 is mother    
                for ($xf=0; ($xf<=$#seq1 && $xf<=$#seq3); $xf++)
                    {
                      if ($seq3[$xf] ne $seq1[$xf]){last;}
                    }
                $xf=$xf-1;
                for ($xm=$#seq2; ($xm>=0 && ($#seq3-($#seq2-$xm)>=0)); $xm--)
                    { 
                      if ($seq3[$#seq3-($#seq2-$xm)] ne $seq2[$xm]) {last; }
                    }
                $xm=$#seq3-($#seq2-$xm)+1;
                if(($xf+1)>=$xm) {
                                  if($_[0] lt $_[1]) {return ($_[2], $_[0], $_[1]);} # it is a chimeras, but only mixed once
                                else                 {return ($_[2], $_[1], $_[0]);}
                                 }
           ## 2 is father, 1 is mother
              else{
                     for ($xf=0; ($xf<=$#seq2 && $xf<=$#seq3); $xf++)
                         {
                           if ($seq3[$xf] ne $seq2[$xf]) {last;}
                         }
                     $xf=$xf-1;
                     for ($xm=$#seq1; ($xm>=0 && ($#seq3-($#seq1-$xm)>=0)); $xm--)
                         {
                           if ($seq3[$#seq3-($#seq1-$xm)] ne $seq1[$xm]) {last; }
                         }
                     $xm=$#seq3-($#seq1-$xm)+1;
                     if(($xf+1)>=$xm) {
                                        if($_[0] lt $_[1]) {return ($_[2], $_[0], $_[1]);} # it is a chimeras, but only mixed once
                                      else                 {return ($_[2], $_[1], $_[0]);}
                                      }
                   else {return ("non","non","non");}
                  }
              } 
         else {return ("non","non","non");}
        }
   }
#Find the chimeras#

print "Done!!!\n";
##Get one cluster's data and find the chimeras##

##end##

#####Author#####
#Jianshi Frank Jin

#####Version#####
#V1.001
#2018.07.30
